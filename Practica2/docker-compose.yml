version: "3"
services:
  mongodb:
    image: mongo
    restart: always
    ports:
      - "27017:27017"
    networks:
      red-db:
        ipv4_address: 10.10.5.10
      
  server1:
    build: ./backend/
    ports:
     - "3021:3021"
    depends_on:
     - mongodb
    environment:
    - DB=10.10.5.10
    - PORT=3021
    - SERVER=201700001
    networks:
      red-db:
        ipv4_address: 10.10.5.2
      red-servidores:
        ipv4_address: 172.35.65.2

  #se crea un segundo servicio con un contenedor el cual utiliza la imagen api-servidor2
  #esta api despliega un mensaje simple, al visitar el endpoint
  # http://localhost:5001/mensaje
  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./proxy/default.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - server1
    ports:
      - "5000:5000"
    networks:
      red-servidores:
        ipv4_address: 172.35.65.5

  frontend:
    build: ./frontend/
    stdin_open: true
    command: npm start
    ports:
        - "80:80"
    networks:
      red-servidores:
        ipv4_address: 172.35.65.6
      red-frontend:
        ipv4_address: 192.168.45.2
#aqui se crean las networks
networks:
  #se crea la red "red-db" usando el driver de tipo "bridge"
  red-db:
    driver: bridge
    ipam:
      config:
        - subnet: 10.10.5.0/24
  #se crea la red "red-servidores" usando el driver de tipo "bridge"
  red-servidores:
    driver: bridge
    ipam:
      config:
        - subnet: 172.35.65.0/24
  red-frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.45.0/24